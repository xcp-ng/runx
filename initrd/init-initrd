#!/bin/sh

# Useful to enable the possibility to use the pivot_root command.
switch_initramfs()
{
    if [ ! -r /etc/initramfs_moved ]; then
        echo "Moving root from initramfs to tmpfs..."
        DEST=/initramfs
        mkdir -p $DEST
        mount -t tmpfs -o size="100%" tmpfs $DEST

        for directory in /*/ ; do
            directory=${directory%/}
            if [ "$directory" != "$DEST" ]; then
                cp -a $directory $DEST 2>/dev/null
            fi
        done
        cp /init $DEST

        touch $DEST/etc/initramfs_moved
        exec switch_root $DEST $0
    fi
}

switch_9p_root()
{
    new_root=$1
    echo "Switching root $1..."

    umount /proc
    umount /sys

    mkdir -p $new_root/run/initramfs

    BUSYBOX_DIR=/run/initramfs/bin

    # Replace poweroff binary because it is called by a PV hypercall when xe vm-shutdown command is executed.
    # In many cases the default poweroff binary of the 9pfs depends on systemd or another program, but we don't use it.
    mkdir -p $new_root/sbin
    rm $new_root/sbin/poweroff 2>/dev/null
    ln -s $BUSYBOX_DIR/busybox $new_root/sbin/poweroff

    # Do the same thing for halt and reboot
    rm $new_root/sbin/halt 2>/dev/null
    rm $new_root/sbin/reboot 2>/dev/null
    ln -s $BUSYBOX_DIR/busybox $new_root/sbin/halt
    ln -s $BUSYBOX_DIR/busybox $new_root/sbin/reboot

    # Relink some commands used in enter script.
    # Relinking all commands has a cost of many seconds, so we do that only on required commands.
    for binary in ash cat chroot getty hostname kill poweroff sleep swapoff sync umount uname xargs ; do
        ln -s -f $BUSYBOX_DIR/busybox /bin/$binary
    done

    cd $new_root
    pivot_root . $new_root/run/initramfs
    cd /

    exec $BUSYBOX_DIR/chroot . $BUSYBOX_DIR/getty -n -l $BUSYBOX_DIR/enter 115200 hvc0

    $BUSYBOX_DIR/ash # Fallback if we can't execute the command.
}

# ==============================================================================

switch_initramfs

mount -t proc proc /proc
mount -t sysfs sysfs /sys
mount -t devtmpfs devtmpfs /dev

touch /etc/fstab

root=`cat /proc/cmdline | grep -o '\broot=[^ ]*' | cut -d = -f 2`
if test -z "$root"
then
    exit 1
fi

if [ "$root" = "9p" ]
then
    mount -t 9p -o msize=131072,trans=xen share_dir /mnt
else
    mount $root /mnt
fi

mkdir /mnt/dev &>/dev/null
mkdir /mnt/sys &>/dev/null
mkdir /mnt/proc &>/dev/null
mount -o bind /dev /mnt/dev
mount -o bind /sys /mnt/sys
mount -o bind /proc /mnt/proc

ip=`cat /proc/cmdline | grep -o '\bip=[^ ]*' | cut -d = -f 2`
gw=`cat /proc/cmdline | grep -o '\bgw=[^ ]*' | cut -d = -f 2`
route=`cat /proc/cmdline | grep -o '\broute=[^ ]*' | cut -d = -f 2`
dns=`cat /proc/cmdline | grep -o '\bdns=[^ ]*' | cut -d = -f 2`
if test "$ip"
then
    [ -z "$bridge" ] && bridge="eth0"

    # ipv4
    if [ "$ip" != "${ip#*[0-9].[0-9]}" ]
    then
        ip link set dev "$bridge" up
        ip addr add "$ip" dev "$bridge"
        if [ "$route" ] && [ "$gw" ]
        then
            route add -net $route gw $gw "$bridge"
        fi
        mkdir -p /mnt/etc
        [ -z "$dns" ] && dns="8.8.8.8"
        echo "nameserver $dns" > /mnt/etc/resolv.conf
    # ipv6
    elif [ "$ip" != "${ip#*:[0-9a-fA-F]}" ]
    then
        ip link set dev "$bridge" up
        ip addr add "$ip" dev "$bridge"
        if [ "$route" ] && [ "$gw" ]
        then
            route -A inet6 add $route gw $gw "$bridge"
        fi
        mkdir -p /mnt/etc
        [ -z "$dns" ] && dns="2001:4860:4860::8888"
        echo "nameserver $dns" > /mnt/etc/resolv.conf
    fi
fi

switch_9p_root /mnt
